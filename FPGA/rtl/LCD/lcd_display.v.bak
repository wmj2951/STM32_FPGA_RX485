module lcd_display(
    input             lcd_pclk,     //时钟
    input             rst_n,        //复位，低电平有效
                                    
    input      [10:0] pixel_xpos,   //像素点横坐标
    input      [10:0] pixel_ypos,   //像素点纵坐标    
    output reg [15:0] pixel_data    //像素点数据,
);                                   
                                     
//parameter define                   
localparam PIC_X_START = 11'd10;     //图片起始点横坐标
localparam PIC_Y_START = 11'd10;     //图片起始点纵坐标
localparam PIC_WIDTH   = 11'd100;    //图片宽度
localparam PIC_HEIGHT  = 11'd100;    //图片高度
                       
localparam CHAR_X_START= 11'd10;     //字符起始点横坐标
localparam CHAR_Y_START= 11'd120;    //字符起始点纵坐标
localparam CHAR_WIDTH  = 11'd128;    //字符宽度,4个字符:32*4
localparam CHAR_HEIGHT = 11'd32;     //字符高度
                       
localparam BACK_COLOR  = 16'hE7FF; //背景色，浅蓝色
localparam CHAR_COLOR  = 16'hF800; //字符颜色，红色

//reg define
reg   [127:0] char[31:0];  //字符数组
reg   [127:0] word[31:0];  //字符数组

reg   [13:0]  rom_addr  ;  //ROM地址
//************************************
//瞎编的代码
reg   [4:0]  number1  ;  //计数器
reg         number_en  ;  //使能
reg   [127:0] num_1;  //字符数组
//************************************

//wire define   00000018244242424242424224180000:/*"0",0*/
wire  [10:0]  x_cnt;       //横坐标计数器
wire  [10:0]  y_cnt;       //纵坐标计数器
wire          rom_rd_en ;  //ROM读使能信号
wire  [15:0]  rom_rd_data ;//ROM数据

//*****************************************************
//**                    main code
//*****************************************************

assign  x_cnt = pixel_xpos + 1'b1  - CHAR_X_START; //像素点相对于字符区域起始点水平坐标
assign  y_cnt = pixel_ypos - CHAR_Y_START; //像素点相对于字符区域起始点垂直坐标
assign  rom_rd_en = 1'b1;                  //读使能拉高，即一直读ROM数据

//计数器
always @(posedge lcd_pclk or negedge rst_n) begin
    if (!rst_n)
        num_1 <= 128'd0;
    else 
        num_1  <= 128'h000000083808080808080808083E0000;        //计数器自加
end

//计数器
always @(posedge lcd_pclk or negedge rst_n) begin
    if (!rst_n)
        pixel_data <= BACK_COLOR;
    else 
        number1  <= number1 + 1;        //计数器自加
end

//$@@%#%
always @(posedge lcd_pclk or negedge rst_n) begin
    if (!rst_n)
            word[0 ]  <= 128'h00000000000000000000000000000000;
            word[1 ]  <= 128'h00000000000000000000000000000000;
            word[2 ]  <= 128'h00000000000100000000002000000000;
            word[3 ]  <= 128'h000000100001800002000070000000C0;
            word[4 ]  <= 128'h000000380001800003FFFFF803FFFFE0;
            word[5 ]  <= 128'h07FFFFFC0001800003006000000001E0;
            word[6 ]  <= 128'h0000C000000180600300600000000300;
            word[7 ]  <= 128'h0000C0000001FFF00300C00000000600;
            word[8 ]  <= 128'h0000C000000180000310804000001800;
            word[9 ]  <= 128'h0000C00000018000031FFFE000003000;
            word[10]  <= 128'h0000C00000018000031800400001C000;
            word[11]  <= 128'h0000C00000018000031800400001C000;
            word[12]  <= 128'h00C0C000018181800318004000018000;
            word[13]  <= 128'h00C0C00001FFFFC0031FFFC000018010;
            word[14]  <= 128'h00C0C060018001800318004000018038;
            word[15]  <= 128'h00C0FFF001800180031800403FFFFFFC;
            word[16]  <= 128'h00C0C000018001800318004000018000;
            word[17]  <= 128'h00C0C000018001800218004000018000;
            word[18]  <= 128'h00C0C00001800180021FFFC000018000;
            word[19]  <= 128'h00C0C000018001800210304000018000;
            word[20]  <= 128'h00C0C00001FFFF800200300000018000;
            word[21]  <= 128'h00C0C000018001800606300000018000;
            word[22]  <= 128'h00C0C000018001000607370000018000;
            word[23]  <= 128'h00C0C00000000000060E31C000018000;
            word[24]  <= 128'h00C0C000001000400418307000018000;
            word[25]  <= 128'h00C0C000020830600430303800018000;
            word[26]  <= 128'h00C0C010020C18300860301800018000;
            word[27]  <= 128'h00C0C038060E18180883700800018000;
            word[28]  <= 128'h3FFFFFFC0C0618181100F008003F8000;
            word[29]  <= 128'h000000001C0408182000600000070000;
            word[30]  <= 128'h00000000000000000000000000020000;
            word[31]  <= 128'h00000000000000000000000000000000;
            number_en   <= 1'b0;
    else if( number_en )
        word[0 ]  <= 128'h00000000000000000000000000000000;  //显示图片
    else
        word[0 ]  <=      {16{num_1[0:7]}};                     //128'h00000000000000000000000000000000;
        word[1 ]  <=      {16{num_1[8:15]}};     //128'h00000000000000000000000000000000;
        word[2 ]  <=      {16{num_1[16:23]}};     //128'h00000000000100000000002000000000;
        word[3 ]  <=      {16{num_1[24:31]}};     //128'h000000100001800002000070000000C0;
        word[4 ]  <=      {16{num_1[32:39]}};     //128'h000000380001800003FFFFF803FFFFE0;
        word[5 ]  <=      {16{num_1[40:47]}};     //128'h07FFFFFC0001800003006000000001E0;
        word[6 ]  <=      {16{num_1[48:55]}};     //128'h0000C000000180600300600000000300;
        word[7 ]  <=      {16{num_1[56:63]}};     //128'h0000C0000001FFF00300C00000000600;
        word[8 ]  <=      {16{num_1[64:71]}};     //128'h0000C000000180000310804000001800;
        word[9 ]  <=      {16{num_1[72:79]}};     //128'h0000C00000018000031FFFE000003000;
        word[10]  <=      {16{num_1[80:87]}};     //128'h0000C00000018000031800400001C000;
        word[11]  <=      {16{num_1[88:95]}};     //128'h0000C00000018000031800400001C000;
        word[12]  <=      {16{num_1[96:103]}};     //128'h00C0C000018181800318004000018000;
        word[13]  <=      {16{num_1[104:111]}};     //128'h00C0C00001FFFFC0031FFFC000018010;
        word[14]  <=      {16{num_1[112:119]}};     //128'h00C0C060018001800318004000018038;
        word[15]  <=      {16{num_1[120:127]}};     //128'h00C0FFF001800180031800403FFFFFFC;

end

//给字符数组赋值，显示汉字“正点原子”，每个汉字大小为32*32
always @(posedge lcd_pclk) begin
    char[0 ]  <= word[0 ];
    char[1 ]  <= word[1 ];
    char[2 ]  <= word[2 ];
    char[3 ]  <= word[3 ];
    char[4 ]  <= word[4 ];
    char[5 ]  <= word[5 ];
    char[6 ]  <= word[6 ];
    char[7 ]  <= word[7 ];
    char[8 ]  <= word[8 ];
    char[9 ]  <= word[9 ];
    char[10]  <= word[10];
    char[11]  <= word[11];
    char[12]  <= word[12];
    char[13]  <= word[13];
    char[14]  <= word[14];
    char[15]  <= word[15];
    char[16]  <= word[16];
    char[17]  <= word[17];
    char[18]  <= word[18];
    char[19]  <= word[19];
    char[20]  <= word[20];
    char[21]  <= word[21];
    char[22]  <= word[22];
    char[23]  <= word[23];
    char[24]  <= word[24];
    char[25]  <= word[25];
    char[26]  <= word[26];
    char[27]  <= word[27];
    char[28]  <= word[28];
    char[29]  <= word[29];
    char[30]  <= word[30];
    char[31]  <= word[31];
end

//为LCD不同显示区域绘制图片、字符和背景色
always @(posedge lcd_pclk or negedge rst_n) begin
    if (!rst_n)
        pixel_data <= BACK_COLOR;
    else if( (pixel_xpos >= PIC_X_START - 1'b1) && (pixel_xpos < PIC_X_START + PIC_WIDTH - 1'b1) 
          && (pixel_ypos >= PIC_Y_START) && (pixel_ypos < PIC_Y_START + PIC_HEIGHT) )
        pixel_data <= rom_rd_data ;  //显示图片
    else if((pixel_xpos >= CHAR_X_START - 1'b1) && (pixel_xpos < CHAR_X_START + CHAR_WIDTH - 1'b1)
         && (pixel_ypos >= CHAR_Y_START) && (pixel_ypos < CHAR_Y_START + CHAR_HEIGHT)) begin
        if(char[y_cnt][CHAR_WIDTH -1'b1 - x_cnt])
            pixel_data <= CHAR_COLOR;    //显示字符
        else
            pixel_data <= BACK_COLOR;    //显示字符区域的背景色
    end
    else
        pixel_data <= BACK_COLOR;        //屏幕背景色
end

//根据当前扫描点的横纵坐标为ROM地址赋值
always @(posedge lcd_pclk or negedge rst_n) begin
    if(!rst_n)
        rom_addr <= 14'd0;
    //当横纵坐标位于图片显示区域时,累加ROM地址    
    else if((pixel_ypos >= PIC_Y_START) && (pixel_ypos < PIC_Y_START + PIC_HEIGHT) 
        && (pixel_xpos >= PIC_X_START - 2'd2) && (pixel_xpos < PIC_X_START + PIC_WIDTH - 2'd2)) 
        rom_addr <= rom_addr + 1'b1;
    //当横纵坐标位于图片区域最后一个像素点时,ROM地址清零    
    else if((pixel_ypos >= PIC_Y_START + PIC_HEIGHT))
        rom_addr <= 14'd0;
end

//ROM：存储图片
rom_10000x16b	rom_10000x16b_inst (
	.address ( rom_addr ),// input wire clka
	.clock ( lcd_pclk ),  // input wire ena
	.rden ( rom_rd_en ),  // input wire [13 : 0] addra
	.q ( rom_rd_data )    // output wire [15 : 0] douta
	);


endmodule 